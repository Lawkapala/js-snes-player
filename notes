These are my notes (Liam Wilson). I gave MrRio's js-snes-player a go, but it failed to work in both Firefox 31 and Chrome 36.0.1985.143.[3~

Error messages:

Firefox:  Error: No audio sink available.  sink.js:412
Chrome: Uncaught [object Object]  sink.js:35

Seems to be using a project called sink.js to play back audio. sink.js seems to be broken in both FF and Chrome.

I'll concentrate on Firefox for now. Strangely it fails in different places in FF and Chrome.

Looking at the code:

Emscripten generated code in snes_spc-0.9.0/snes_spc.js . This looks like old Emscripten code (pre-asm.js ). From the comments at the top:

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

Last commit by MrRio is Aug 2012. This explains it (that's about 6 months before asm.js was available). Will need to regenerate the code at some point. Shouldn't affect fixing the audio bug.

Web Audio was also a mess in 2012 (and still is in 2014 really). This probably explains why sink.js just fails.

Looks like last commit to sink.js was https://github.com/jussi-kalliokoski/sink.js/commits/master in October 2012. Maybe abandoned.

Anyway, back to the audio bug...

Next it loads js/js-snes-player.js

Module pattern. jsSNESPlayer created then init function called. init sets up a bunch of stuff (I assume it's twitter bootstrap bumpf). In the end, when you click the play button play gets called on line 111.

From debugger, play defined on js-snes-player.js:22 . 

Had a look through play function. It fails when it tries to initialize the Sink. sink.js is totally broken. 2 years old, overly complicated  and unmaintained. I'll need a new way to play back the audio. 

The business end of the play function is on line 67:

proxy.on('audioprocess', function(buffer, channelCount){

				var retval = _spc_play(snes_spc, bufferSize / 2, buf);
				_spc_filter_run(filter, buf, bufferSize);

				for (i = 0; i < bufferSize; i ++) {

					// Take a mono stream
					if ((i - 1) % 2 == 0) {
						buffer[i] = HEAP8[i  + buf] / 120;

					} else {
						buffer[i] = HEAP8[i + buf - 1] / 120;

					}
				}
				console.log('Send audio to buffer... Memory points from HEAP ' + i + ' to ' + (i + buf));
			}, 2, null, 12000);


This is the audio callback. The buffer "buffer" is the output buffer for the Web Audio API. bufferSize is the number of samples to generate

